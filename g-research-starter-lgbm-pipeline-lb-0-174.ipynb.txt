{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.10","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":30894,"databundleVersionId":3147400,"sourceType":"competition"}],"dockerImageVersionId":30145,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# ðŸª™ G-Research Crypto - Starter LGBM Pipeline\n![](https://storage.googleapis.com/kaggle-competitions/kaggle/30894/logos/header.png)\n\n\n### Just a simple pipeline going from zero to a valid submission\n\nWe train one `LGBMRegressor` for each asset over a very very naive set of features (the input dataframe `['Count', 'Open', 'High', 'Low', 'Close', 'Volume', 'VWAP']`), we get the predictions correctly using the iterator and we submit. No validation for now, no cross validation... nothing at all lol: just the bare pipeline!\n\n\n## Please _DO_ upvote if you find this useful!\n\n## References:\n* [Detailed API Introduction](https://www.kaggle.com/sohier/detailed-api-introduction)\n* [Basic Submission Template](https://www.kaggle.com/sohier/basic-submission-template)\n* [Tutorial to the G-Research Crypto Competition](https://www.kaggle.com/cstein06/tutorial-to-the-g-research-crypto-competition)\n\n\n\n__Changelog__\n\n__V5__: Added two non-timely features from the tutorial: `Upper_Shadow` and `Lower_Shadow`","metadata":{}},{"cell_type":"code","source":"#!/bin/bash\nkaggle models instances versions download ppppni/gpt2_tokenizer/pyTorch/tokenizer/1","metadata":{"execution":{"iopub.status.busy":"2024-06-28T02:35:25.337791Z","iopub.execute_input":"2024-06-28T02:35:25.338258Z","iopub.status.idle":"2024-06-28T02:35:25.368885Z","shell.execute_reply.started":"2024-06-28T02:35:25.338150Z","shell.execute_reply":"2024-06-28T02:35:25.367264Z"},"trusted":true},"execution_count":1,"outputs":[{"traceback":["\u001b[0;36m  File \u001b[0;32m\"/tmp/ipykernel_20/2007717752.py\"\u001b[0;36m, line \u001b[0;32m2\u001b[0m\n\u001b[0;31m    kaggle models instances versions download ppppni/gpt2_tokenizer/pyTorch/tokenizer/1\u001b[0m\n\u001b[0m                ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"],"ename":"SyntaxError","evalue":"invalid syntax (2007717752.py, line 2)","output_type":"error"}]},{"cell_type":"code","source":"import kagglehub\n# Download latest version\npath = kagglehub.model_download(\"ppppni/gpt2_tokenizer/pyTorch/tokenizer\")\nprint(\"Path to model files:\", path)","metadata":{"execution":{"iopub.status.busy":"2024-06-28T02:35:25.370292Z","iopub.status.idle":"2024-06-28T02:35:25.370889Z","shell.execute_reply.started":"2024-06-28T02:35:25.370556Z","shell.execute_reply":"2024-06-28T02:35:25.370589Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"git clone -help https://github.com/1408eduardo/Market-Maker-Bot/","metadata":{"scrolled":true,"execution":{"iopub.status.busy":"2024-06-28T02:36:43.841337Z","iopub.execute_input":"2024-06-28T02:36:43.841653Z","iopub.status.idle":"2024-06-28T02:36:43.847792Z","shell.execute_reply.started":"2024-06-28T02:36:43.841620Z","shell.execute_reply":"2024-06-28T02:36:43.846583Z"},"trusted":true},"execution_count":5,"outputs":[{"traceback":["\u001b[0;36m  File \u001b[0;32m\"/tmp/ipykernel_20/4100127480.py\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    git clone -help https://github.com/1408eduardo/Market-Maker-Bot/\u001b[0m\n\u001b[0m            ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"],"ename":"SyntaxError","evalue":"invalid syntax (4100127480.py, line 1)","output_type":"error"}]},{"cell_type":"markdown","source":"This is a fork of the original notebook. My intention here to show is what can be done with this method to improve your score.","metadata":{}},{"cell_type":"markdown","source":"# Import and load dfs\n\nReferences: [Tutorial to the G-Research Crypto Competition](https://www.kaggle.com/cstein06/tutorial-to-the-g-research-crypto-competition)","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom lightgbm import LGBMRegressor\nimport gresearch_crypto\n\n\nTRAIN_CSV = '/kaggle/input/g-research-crypto-forecasting/train.csv'\nASSET_DETAILS_CSV = '/kaggle/input/g-research-crypto-forecasting/asset_details.csv'","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_df = pd.read_csv(TRAIN_CSV)\nasset_df = pd.read_csv(ASSET_DETAILS_CSV)\ntrain_df.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"asset_df = asset_df.sort_values('Asset_ID')\nasset_df","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"mycontract.sol","metadata":{}},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"code","source":"import os\nfrom web3 import Web3\n# Configurar proveedor de Infura\ninfura_project_id = \"TU_PROYECTO_ID\"\ninfura_url = f\"https://mainnet.infura.io/v3/{infura_project_id}\"\nw3 = Web3(Web3.HTTPProvider(infura_url))","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"direccion_token = \"0x...TU_DIRECCION_DEL_TOKEN...\"\nabi_token = [...TU_ABI_DEL_TOKEN...]\ntoken_contract = w3.eth.contract(address=direccion_token, abi=abi_token)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# mycontract.sol:\n\npragma solidity ^0.8.18;\ncontract MyContract {\n    uint256 public value;\n    constructor(uint256 _p) {\n        value = _p;\n    }\n    function setP(uint256 _n) payable public {\n        value = _n;\n    }\n    function setNP(uint256 _n) public {\n        value = _n;\n    }\n    function get() view public returns (uint256) {\n        return value;\n    }\n}","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Training","metadata":{}},{"cell_type":"markdown","source":"## Utility functions to train a model for one asset","metadata":{}},{"cell_type":"code","source":"def upper_shadow(df):\n    return df['High'] - np.maximum(df['Close'], df[\"Open\"])\ndef lower_shadow(df):\n    return np.minimum(df['Close'], df['Open']) - df['Low']\n\n# A utility function that builds the features from the original dataset\ndef get_features(df):\n    df_feature = df[['Count', 'Open', 'High', 'Low', 'Close', 'Volume', 'VWAP']].copy()\n    df_feature['Lower_Shadow'] = lower_shadow(df_feature)\n    df_feature['Upper_Shadow'] = upper_shadow(df_feature)\n    return df_feature\n\ndef get_model(df_train, asset_id):\n    df = df_train[df_train['Asset_ID'] == asset_id]\n    \n    model_df = get_features(df)\n    model_df['y'] = df['Target']\n    model_df = model_df.dropna(how='any')\n    \n    X = model_df.drop('y', axis=1)\n    y = model_df['y']\n    \n    model = LGBMRegressor(n_estimators=1000)\n    model.fit(X, y)\n    return X, y, model","metadata":{"_kg_hide-output":true,"execution":{"iopub.status.busy":"2024-06-26T10:58:55.544251Z","iopub.status.idle":"2024-06-26T10:58:55.544618Z","shell.execute_reply.started":"2024-06-26T10:58:55.544422Z","shell.execute_reply":"2024-06-26T10:58:55.544447Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Loop over all assets","metadata":{}},{"cell_type":"code","source":"X_all = {}\ny_all = {}\nmodels = {}\n\nfor asset_id, asset_name in zip(asset_df['Asset_ID'], asset_df['Asset_Name']):\n    print(f\"Training model for {asset_name:<16}  (ID={asset_id:<2})\")\n    X, y, model = get_model(train_df, asset_id)\n    X_all[asset_id], y_all[asset_id], models[asset_id] = X, y, model","metadata":{"execution":{"iopub.status.busy":"2024-06-26T10:59:03.106168Z","iopub.execute_input":"2024-06-26T10:59:03.106481Z"},"trusted":true},"execution_count":null,"outputs":[{"name":"stdout","text":"Training model for Binance Coin      (ID=0 )\nTraining model for Bitcoin           (ID=1 )\nTraining model for Bitcoin Cash      (ID=2 )\nTraining model for Cardano           (ID=3 )\n","output_type":"stream"}]},{"cell_type":"code","source":"#  CHECKING MODEL INTERFACE\nx = get_features(train_df.iloc[1])\ny_preds = models[0].predict([x])\ny_preds[0]","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Predict & submit\n\nReferences: [Detailed API Introduction](https://www.kaggle.com/sohier/detailed-api-introduction)\n\nSomething that helped me understand this iterator was adding a pdb checkpoint inside of the for loop:\n\n```python\nimport pdb; pdb.set_trace()\n```\n\nSee [Python Debugging With Pdb](https://realpython.com/python-debugging-pdb/) if you want to use it and you don't know how to.\n","metadata":{"execution":{"iopub.status.busy":"2021-11-02T20:57:49.349459Z","iopub.status.idle":"2021-11-02T20:57:49.349757Z","shell.execute_reply.started":"2021-11-02T20:57:49.349596Z","shell.execute_reply":"2021-11-02T20:57:49.349613Z"}}},{"cell_type":"code","source":"env = gresearch_crypto.make_env()\niter_test = env.iter_test()\n\nfor i, (df_test, df_pred) in enumerate(iter_test):\n    for j , row in df_test.iterrows():\n        \n        model = models[row['Asset_ID']]\n        x_test = get_features(row)\n        y_pred = model.predict([x_test])[0]\n        \n        df_pred.loc[df_pred['row_id'] == row['row_id'], 'Target'] = y_pred\n        \n        \n        # Print just one sample row to get a feeling of what it looks like\n        if i == 0 and j == 0:\n            display(x_test)\n            \n    # Display the first prediction dataframe\n    if i == 0:\n        display(df_pred)\n\n    # Send submissions\n    env.predict(df_pred)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(\"Run Faster Damn It!\")","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}