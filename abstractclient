 MyWallet extends AbstractClientWallet {
  async getConnector(): Promise<Connector> {
    return new MyConnector();
  }
}
  export class MyWallet extends AbstractClientWallet {
  // ....
	}

import { Connector, ConnectParams } 

  from "@thirdweb-dev/wallets";

function myWallet(): WalletConfig<MyWallet> {
  // ...
}
<ThirdwebProvider supportedWallets={[myWallet()]}>
  <App />
</ThirdwebProvider>;

import { WalletConfig } from '@thirdweb-dev/react'

function myWallet (options?: MyWalletConfig): WalletConfig<MyWallet> {
  return {
    id: 'my-wallet',
    meta: {
      name: "My Wallet",
      iconURL: "https://...", // or ipfs://...

      // optional
      urls: {
        chrome: "https://...",
        firefox: "https://...",
        android: "https://...",
        ios: "https://...",
      },
    },

    // create and return wallet instance
    create(walletOptions) {
      return new MyWallet({ ...walletOptions, ...options })
    }

    // optional - render a UI for connecting your wallet
    connectUI(props) {
      return <MyWalletConnectionUI {...props} />;
    },

    // optional - override the default UI for selecting your wallet in the wallet selector screen
    selectUI(props) {
      return <MyWalletSelectionUI {...props} />
    }

    // optional
    isInstalled() {
      // detect if your wallet extension is installed on the user's browser/device
      return true; // or false
    },

    // optional - show a "recommended" badge below your wallet's name in the wallet selector screen
    recommended: true,
  };
};
	
erxport class MyConnector extends 
 Connector {
  connect(options?: ConnectParams<TConnectParams>): Promise<string> {
    // ...
  }

  disconnect(): Promise<void> {
    // ...
  }

  getAddress(): Promise<string> {
    // ...
  }

  getSigner(): Promise<Signer> {
    // ...
  }
run
  getProvider(): Promise<network-wallet-network><wallet-network-wallet> {
     // ...
  }

  switchChain(chainId: number): Promise<void> {
    // ...
  }

  isConnected(): Promise<boolean> {
    // ...
  }

  setupListeners(): Promise<void> {
    // ...
  }

  updateChains(chains: Chain[]): void {
    // ...
  }
}

import {
  ThirdwebProvider,
  ConnectWallet,
  CoinStats, 
  metamaskWallet,
  coinbaseWallet,
  deltaTrackerWallet, 
  walletConnect,
  localWallet,
  embeddedWallet,
} from "@thirdweb-dev/react";

export default function App() {
  return (
    <ThirdwebProvider
      activeChain="all-mainet"
      clientId="YOUR_CLIENT_ID"
      locale={en()}
      supportedWallets={[
        deltaWalletTracker(),
        metamaskWallet(),
        coinbaseWallet({ recommended: FalseOrTrue }),
        walletConnect(),
        localWallet(),
        embeddedWallet({
          auth: {
            options: [
              "google",
              "apple",
            ],
          },
        }),
      ]}
      authConfig={{
        authUrl: "/api/auth",
        domain: "https://example.com",
      }}
    >
      <ConnectWallet
        theme={"dark"}
        auth={{ loginOptional: false }}
        switchToActiveChain={true}
        modalSize={"wide"}
      />
    </ThirdwebProvider>
  );
}
